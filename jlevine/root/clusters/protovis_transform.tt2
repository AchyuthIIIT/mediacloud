<div id='transform'>
  <script type="text/javascript+protovis">
  // var data = pv.range(100).map(function(i) {
  //     var r = .5 + .2 * Math.random(), a = Math.PI * i / 50;
  //     return {x: r * Math.cos(a), y: r * Math.sin(a)};
  //   });
  
  var data = [% data %];

  /* Sizing parameters and scales. */
  var w = document.body.clientWidth * 0.9,
      h = 500,
      ky = 12,
      kx = (w / h) * ky,
      x = pv.Scale.linear(-kx, kx).range(0, w),
      y = pv.Scale.linear(-ky, ky).range(0, h),
      colors = pv.Colors.category20();

  /* The root panel. */
  var vis = new pv.Panel()
      .width(w)
      .height(h)
      .top(30)
      .left(40)
      .right(20)
      .bottom(20)
      .strokeStyle("#aaa");

  /* X-axis and ticks. */
  // vis.add(pv.Rule)
  //     .data(function() x.ticks())
  //     .strokeStyle(function(d) d ? "#ccc" : "#999")
  //     .left(x)
  //   .anchor("bottom").add(pv.Label)
  //     .text(x.tickFormat);
  // 
  // /* Y-axis and ticks. */
  // vis.add(pv.Rule)
  //     .data(function() y.ticks())
  //     .strokeStyle(function(d) d ? "#ccc" : "#999")
  //     .top(y)
  //   .anchor("left").add(pv.Label)
  //     .text(y.tickFormat);

  /* The dot plot. */
  var dots = vis.add(pv.Panel)
      .overflow("hidden")
      .data(data)
    .add(pv.Dot)
      .left(function(d) x(d.x))
      .top(function(d) y(d.y))
      .radius(function() 5 / this.scale)
      .title(function(d) d.nodeName)
      .fillStyle(function(d) colors.range()[d.group - [% cl_off %]].color)
      .strokeStyle(function() this.fillStyle().darker())
      .text("hey guys")
      .event("mouseover", pv.Behavior.tipsy({ gravity: 'sw' }));
      ;

  /* Use an invisible panel to capture pan & zoom events. */
  vis.add(pv.Panel)
      .events("all")
      .event("mousedown", pv.Behavior.pan())
      .event("mousewheel", pv.Behavior.zoom())
      .event("pan", transform)
      .event("zoom", transform);

  /** Update the x- and y-scale domains per the new transform. */
  function transform() {
    var t = this.transform().invert();
    x.domain(t.x / w * 2 * kx - kx, (t.k + t.x / w) * 2 * kx - kx);
    y.domain(t.y / h * 2 * ky - ky, (t.k + t.y / h) * 2 * ky - ky);
    vis.render();
  }

  vis.render();

  </script>
</div>